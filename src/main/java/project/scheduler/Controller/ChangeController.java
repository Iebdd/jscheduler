package project.scheduler.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import project.scheduler.Repositories.UserRepository;
import project.scheduler.Tables.User;
import project.scheduler.Util.Password;


@Controller // This means that this class is a Controller
@RequestMapping(path="/change") // This means URL's start with /user (after Application path)
public class ChangeController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
/*   private CourseRepository courseRepository;
  private RoomRepository roomRepository;
  private UserCourseRepository userCourseRepository;
  private RoomCourseRepository roomCourseRepository;
  private TokenRepository tokenRepository; */

/*   @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam Integer role, @RequestParam String name
      , @RequestParam String password, @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    Password pw = new Password(password);

    User new_user = userRepository.save(new User(role, name, pw.getPassword(), email));
    return String.format("Added user: %s with user id %d%n", name, new_user.getId());
  } */

  @PostMapping(path="/password")
  public @ResponseBody String setPasswordById(@RequestParam String old_password, @RequestParam String new_password, 
    @RequestParam Integer user_id) {
      User new_user = userRepository.findById(user_id).orElse(null);
      if (new_user == null) {
        return String.format("User %d not found or password incorrect%n", user_id);
      }
      Password hashed = new Password(new_user.getPassword(), true);
      if (!hashed.compare(old_password)) {
        return String.format("User %d not found or password incorrect%n", user_id);
      }
      Password new_pw = new Password(new_password);
      userRepository.updatePassword(new_pw.getPassword(), user_id);
      return String.format("Saved new password for user: %d%n", user_id);
  }
}


