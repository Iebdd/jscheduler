package project.scheduler;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
/*   private CourseRepository courseRepository;
  private RoomRepository roomRepositoy;
  private UserCourseRepository userCourseRepository;
  private RoomCourseRepository roomCourseReposity;
  private TokenRepository tokenRepository; */

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam Integer role, @RequestParam String name
      , @RequestParam String password, @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    Password pw = new Password(password);

    User new_user = userRepository.save(new User(role, name, pw.getPassword(), pw.getSalt(), email));
    return String.format("Added user: %s with user id %d", name, new_user.getId());
  }

  @PostMapping(path="/pw")
  public @ResponseBody String setPasswordById(@RequestParam String password, @RequestParam Integer user_id) {
      Password pw = new Password(password);
      
      return String.format("Saved new password for user: %d", user_id);
  }

  @PostMapping(path="/pw/verify")
  public @ResponseBody Boolean verifyPassword(@RequestParam String password, @RequestParam String email) {
    Password hashed = new Password(userRepository.findPasswordByEmail(email));
    return hashed.compare(password);
  }
  

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
}
